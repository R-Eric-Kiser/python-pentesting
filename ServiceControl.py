import subprocess

# Prompt user for list of IP addresses of remote systems
remote_ips = input("Enter comma-separated list of IP addresses of remote systems: ").split(',')

# Prompt user for location of service to start
service_location = input("Enter location of service to start (e.g. /etc/systemd/system/): ")

# Prompt user for desired state of service (on/off)
service_state = input("Would you like the service to be on or off? ").lower()

# Check current state of service on each system
for remote_ip in remote_ips:
    # Use subprocess module to run an external command that invokes the ansible command-line tool
    # Pass a list of command-line arguments that specify the inventory (-i), remote user (-u), ask for SSH password (-k),
    # prompt for sudo password (--ask-become-pass), and an ad-hoc command (-a) that checks the status of the service
    ansible_check = subprocess.run(['ansible', remote_ip + ',', '-u', 'your_username', '-k', '--ask-become-pass', '-a', 'systemctl is-active ' + service_location.split('/')[-1]], capture_output=True, text=True)

    # Check the output of the ansible command to determine current state of the service
    if 'inactive' in ansible_check.stdout:
        current_state = 'off'
    elif 'active' in ansible_check.stdout:
        current_state = 'on'
    else:
        current_state = 'unknown'

    # Print current state of service for each system
    print("Current state of service on " + remote_ip + ": " + current_state)

    # If desired state is different from current state, run the Ansible playbook to change state
    if service_state != current_state:
        # Use subprocess module to run an external command that invokes the ansible-playbook command-line tool
        # Pass a list of command-line arguments that specify the inventory (-i), remote user (-u), ask for SSH password (-k),
        # prompt for sudo password (--ask-become-pass), and extra variables (-e) for service location, name, and state
        ansible_playbook = subprocess.run(['ansible-playbook', '-i', remote_ip + ',', '-u', 'your_username', '-k', '--ask-become-pass', '-e', 'service_location=' + service_location, '-e', 'service_state=' + service_state, 'service_control.yml'], capture_output=True, text=True)

        # Check the return code of the ansible-playbook command to determine success or failure
        # Print output for each system
        if ansible_playbook.returncode == 0:
            print("Service turned " + service_state + " successfully on " + remote_ip)
        else:
            print("Error turning service " + service_state + " on " + remote_ip + ": " + ansible_playbook.stderr)
