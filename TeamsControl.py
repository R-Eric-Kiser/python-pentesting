import requests
import json

# Replace the placeholders with your own values
tenant_id = '<your tenant ID>'
client_id = '<your client ID>'
client_secret = '<your client secret>'
team_id = '<your team ID>'
channel_id = '<your channel ID>'

# Get an access token for Microsoft Graph API
auth_url = 'https://login.microsoftonline.com/{}/oauth2/v2.0/token'.format(tenant_id)
auth_data = {
    'grant_type': 'client_credentials',
    'client_id': client_id,
    'client_secret': client_secret,
    'scope': 'https://graph.microsoft.com/.default'
}
auth_headers = {
    'Content-Type': 'application/x-www-form-urlencoded'
}
auth_response = requests.post(auth_url, data=auth_data, headers=auth_headers)
access_token = json.loads(auth_response.text)['access_token']

# Define function to list messages
def list_messages():
    graph_url = 'https://graph.microsoft.com/v1.0/teams/{}/channels/{}/messages'.format(team_id, channel_id)
    graph_headers = {
        'Authorization': 'Bearer {}'.format(access_token)
    }
    graph_response = requests.get(graph_url, headers=graph_headers)
    messages = json.loads(graph_response.text)['value']
    for message in messages:
        print(message['body']['content'])

# Define function to search for messages
def search_messages():
    keyword = input('Enter a keyword to search for: ')
    graph_url = 'https://graph.microsoft.com/v1.0/teams/{}/channels/{}/messages?$search="{}"'.format(team_id, channel_id, keyword)
    graph_headers = {
        'Authorization': 'Bearer {}'.format(access_token)
    }
    graph_response = requests.get(graph_url, headers=graph_headers)
    messages = json.loads(graph_response.text)['value']
    for message in messages:
        print(message['body']['content'])

# Define function to delete a message
def delete_message():
    message_id = input('Enter the ID of the message to delete: ')
    graph_url = 'https://graph.microsoft.com/v1.0/teams/{}/channels/{}/messages/{}'.format(team_id, channel_id, message_id)
    graph_headers = {
        'Authorization': 'Bearer {}'.format(access_token)
    }
    graph_response = requests.delete(graph_url, headers=graph_headers)
    if graph_response.status_code == 204:
        print('Message deleted successfully.')
    else:
        print('Error deleting message. Status code: {}'.format(graph_response.status_code))

# Define function to send a message
def send_message():
    message_body = input('Enter the message to send: ')
    graph_url = 'https://graph.microsoft.com/v1.0/teams/{}/channels/{}/messages'.format(team_id, channel_id)
    graph_headers = {
        'Authorization': 'Bearer {}'.format(access_token),
        'Content-Type': 'application/json'
    }
    graph_payload = {
        'body': {
            'content': message_body
        }
    }
    graph_response = requests.post(graph_url, headers=graph_headers, json=graph_payload)
    if graph_response.status_code == 201:
        print('Message sent successfully.')
    else:
        print('Error sending message. Status code: {}'.format(graph_response.status_code))

# Define function to display the choice menu
def display_menu():
    while True:
        print('Please select an option:')
        print('1. List all messages')
        print('2. Search for messages')
        print('3. Delete a message')
        print('4. Send a message')
