import os
import shutil
import schedule
import time
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from google.auth.transport.requests import Request
from google.oauth2 import service_account
from googleapiclient.http import MediaFileUpload


# Set the path of the folder to upload
folder_path = "path/to/folder"

# Set the credentials file path for a service account with appropriate access to the Google Drive API
credentials_path = "path/to/credentials.json"

# Set the ID of the Google Drive folder to upload to
folder_id = "google_drive_folder_id"

# Authenticate with Google Drive API using service account credentials
creds = None
if os.path.exists('token.json'):
    creds = Credentials.from_authorized_user_file('token.json', ['https://www.googleapis.com/auth/drive'])
elif os.path.exists(credentials_path):
    creds = service_account.Credentials.from_service_account_file(credentials_path, scopes=['https://www.googleapis.com/auth/drive'])
else:
    print("No valid credentials file found.")
    exit()

# Create a Google Drive API client
service = build("drive", "v3", credentials=creds)


def upload_files_to_drive():
    # Create a folder on Google Drive if it doesn't exist
    try:
        file_metadata = {'name': os.path.basename(folder_path), 'parents': [folder_id], 'mimeType': 'application/vnd.google-apps.folder'}
        folder = service.files().create(body=file_metadata, fields='id').execute()
        print("Folder created: ", folder.get('id'))
    except HttpError as error:
        print(f'An error occurred: {error}')
        folder = None

    # Upload files from the local folder to Google Drive
    if folder is not None:
        for filename in os.listdir(folder_path):
            file_path = os.path.join(folder_path, filename)
            if os.path.isfile(file_path):
                try:
                    file_metadata = {'name': filename, 'parents': [folder['id']]}
                    media = MediaFileUpload(file_path, resumable=True)
                    file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
                    print(f"File {filename} uploaded: {file.get('id')}")
                except HttpError as error:
                    print(f'An error occurred: {error}')

        # Delete files from the local folder once uploaded
        shutil.rmtree(folder_path)


# Schedule the script to run every hour
schedule.every().hour.do(upload_files_to_drive)

while True:
    schedule.run_pending()
    time.sleep(1)
