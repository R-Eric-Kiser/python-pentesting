import subprocess

# Prompt user for remote IP address and desired service state
remote_ip = input("Enter IP address of remote system: ")
service_state = input("Enter desired service state (on/off): ")

# Prompt user for the path of the text file containing service locations
service_list_path = input("Enter the path of the text file containing service locations: ")

# Read the text file and create a list of service locations
with open(service_list_path, "r") as service_file:
    service_locations = [line.strip() for line in service_file.readlines()]

# Loop through each service location in the list
for service_location in service_locations:
    # Use subprocess module to run an external command that invokes the ansible command-line tool
    # Pass a list of command-line arguments that specify the inventory (-i), remote user (-u), ask for SSH password (-k),
    # prompt for sudo password (--ask-become-pass), and the ad-hoc command to check the current state of the service
    ansible_check = subprocess.run(['ansible', remote_ip + ',', '-u', 'your_username', '-k', '--ask-become-pass', '-a', 'systemctl is-active ' + service_location.split('/')[-1]], capture_output=True, text=True)

    # Check the output of the ansible command to determine current state of the service
    if 'inactive' in ansible_check.stdout:
        current_state = 'off'
    elif 'active' in ansible_check.stdout:
        current_state = 'on'
    else:
        current_state = 'unknown'

    # Print current state of service for each system
    print("Current state of service " + service_location + " on " + remote_ip + ": " + current_state)

    # If desired state is different from current state, run the Ansible playbook to change state
    if service_state != current_state:
        # Use subprocess module to run an external command that invokes the ansible-playbook command-line tool
        # Pass a list of command-line arguments that specify the inventory (-i), remote user (-u), ask for SSH password (-k),
        # prompt for sudo password (--ask-become-pass), and extra variables (-e) for service location, name, and state
        ansible_playbook = subprocess.run(['ansible-playbook', '-i', remote_ip + ',', '-u', 'your_username', '-k', '--ask-become-pass', '-e', 'service_location=' + service_location, '-e', 'service_state=' + service_state, 'start_service.yml'], capture_output=True, text=True)

        # Check the return code of the ansible-playbook command to determine success or failure
        # Print output for each system
        if ansible_playbook.returncode == 0:
            print("Service " + service_location + " turned " + service_state + " successfully on " + remote_ip)
        else:
            print("Error turning service " + service_location + " " + service_state + " on " + remote_ip + ": " + ansible_playbook.stderr)
